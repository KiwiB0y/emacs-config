#+title: README
#+author: KiwiBoaye
#+options: num:nil date:nil
* Emacs Configuration
  This is a configuration file that includes all of my personal changes and improvements on the emacs 26
  Everything that I wrote here is ment to be in the .emacs file. Enjoy and feel free to add on new content.

* What's in the header
  - Visual bell
  - Inhibit the startup message
  - Blinking the cursor
  - Parenthesis pairing
  - Removed the scroll bar
  - Removed the tool bar

  #+begin_src emacs-lisp

    (blink-cursor-mode 1)    ;; Set blinking
    (set-fringe-mode 10)     ;; Give breathing room
    (tool-bar-mode -1)       ;; Disable the toolbar
    (scroll-bar-mode -1)     ;; Disable the scrollbar
    (electric-pair-mode 1)   ;; Electric pair parenthesis
    (column-number-mode 1)   ;; Add column number
    (show-paren-mode 1)      ;; Show global parenthesis on all buffers
    (setq inhibit-startup-message t)

    ;; Set visible notification bell
    (setq visible-bell 'top-bottom)
    (setq bell-volume 0)

  #+end_src

* Features that I added on with time
** Made tabs like spaces
   My regular width is 2.

   #+begin_src emacs-lisp

     (setq tab-width 2)
     (setq-default indent-tabs-mode nil)

   #+end_src

** Made line numbers relative
   I prefer relative numbers instead of static ones.
   That way I can jump through the files with ease.


   #+begin_src emacs-lisp

     (defvar display-line-numbers-type)
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode t)

   #+end_src
   

*** Hooks
    I added hooks for the all the terminal modes

   #+begin_src emacs-lisp

     (add-hook 'shell-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode 0)))

   #+end_src

** The package archives
   I use only elpa and melpa packages

   #+begin_src emacs-lisp

     (require 'package)
     (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/")
               '("org" . "https://orgmode.org/elpa/"))

     ;; Check package sources like so and refresh
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

   #+end_src

*** Added use-package as well and turned it on by default
    use-package is a better archive management macro.
    [[https://github.com/jwiegley/use-package][Check its github page for more info]].
    

    #+begin_src emacs-lisp

      ;; Initialize use-package on all platforms
      (unless (package-installed-p 'use-package)
              (package-install 'use-package))
      (require 'use-package)
      (setq use-package-always-ensure t)

    #+end_src

** Custom variables
   I wanted to make a cleaner .emacs file so I changed where the
   custom variables are being saved. That way I can see better
   what is going in it.


    #+begin_src emacs-lisp

      ; NOTE: the .custom.el file should be created in .emacs.d/ directory or
      ; the equivalent directory of your emacs distribution  
      (setq custom-file (expand-file-name ".custom.el" user-emacs-directory))
      (load custom-file)

    #+end_src

** Org-Mode
   I made an org-file that contains everything connected to my 
   org-mode configuration, similarly to what I've done with the
   custom file mentioned above

   #+begin_src emacs-lisp

     (defvar org-file
       (setq org-file (expand-file-name ".org-config.el" user-emacs-directory)))
     (load org-file)

   #+end_src
   
   Check this guy's github page for more info [[https://github.com/sabof/org-bullets][here]]

** Small features
   Here is a list of small features I added for a better experience 
   using emacs.

*** View by half page
    
    #+begin_src emacs-lisp

      (use-package view
        :bind
        ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

    #+end_src

*** Doom emacs mode line

    #+begin_src emacs-lisp

      (use-package doom-modeline
        :ensure t
        :init   (doom-modeline-mode 1)
        :custom ((doom-modeline-mode-height 12)))

    #+end_src

    In order to work properly just run the following command
    or refer to the original repos here [[https://github.com/seagle0128/doom-modeline][doom-modeline's page]] / [[https://github.com/domtronn/all-the-icons.el#installation][all-the-icons installation]].

    #+begin_src 
    M-x all-the-icons-install-fonts
    #+end_src

*** Ivy completion and ivy-rich
    This installs counsel and swiper as well.
    For futher info check [[https://github.com/abo-abo/swiper][Swiper's github page.]]

    #+begin_src emacs-lisp

      (use-package ivy
              :diminish
              :bind
                   ("M-x" . 'counsel-M-x)
                   ("C-s" . 'swiper)
                   ("C-x C-f" . 'counsel-find-file)
              :config
              (ivy-mode 1))

      (use-package ivy-rich
        :init
        (ivy-rich-mode 1))

    #+end_src


*** Which key 
    Explain what every key binding does in a simple way

    #+begin_src emacs-lisp 
 
      (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay 0.6)) ;; This is what I've chosen as a delay

    #+end_src

** Theme
   I use the dracula theme and here's how that looks in my .emacs file.
   You can get the dracula theme from [[https://draculatheme.com/emacs/][dracula theme for emacs]].
   #+begin_src emacs-lisp

     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'dracula t)
     (setq dracula-use-24-bit-colors-on-256-colors-terms t)
     (unless (display-graphic-p)
       (set-face-background 'default "black" nil))

   #+end_src


** LSP-Mode
   An important feature for completion and code refactoring
*** TypeScript
    I added a typescript lsp-server which gives me constant help when I am coding in =.ts=

    #+begin_src emacs-lisp

      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))

      (use-package typescript-mode
        :mode "\\.ts\\'"
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2))

    #+end_src
